!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){var i,o;
/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @license MIT
 */
/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @license MIT
 */
!function(a){"use strict";void 0===(o="function"==typeof(i=a)?i.call(t,n,t,e):i)||(e.exports=o)}(function(){"use strict";if("undefined"==typeof window||!window.document)return function(){throw new Error("Sortable.js requires a window with a document")};var e,t,n,i,o,a,s,r,l,c,d,u,f,h,v,p,g,m,y,b,L,_={},w=/\s+/g,S=/left|right|inline/,D="Sortable"+(new Date).getTime(),E=window,T=E.document,q=E.parseInt,x=E.setTimeout,k=E.jQuery||E.Zepto,C=E.Polymer,M=!1,N="draggable"in T.createElement("div"),H=!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\.|msie)/i)&&((L=T.createElement("x")).style.cssText="pointer-events:auto","auto"===L.style.pointerEvents),A=!1,B=Math.abs,O=Math.min,P=[],I=[],R=ie(function(e,t,n){if(n&&t.scroll){var i,o,a,s,d,u,f=n[D],h=t.scrollSensitivity,v=t.scrollSpeed,p=e.clientX,g=e.clientY,m=window.innerWidth,y=window.innerHeight;if(l!==n&&(r=t.scroll,l=n,c=t.scrollFn,!0===r)){r=n;do{if(r.offsetWidth<r.scrollWidth||r.offsetHeight<r.scrollHeight)break}while(r=r.parentNode)}r&&(i=r,o=r.getBoundingClientRect(),a=(B(o.right-p)<=h)-(B(o.left-p)<=h),s=(B(o.bottom-g)<=h)-(B(o.top-g)<=h)),a||s||(s=(y-g<=h)-(g<=h),((a=(m-p<=h)-(p<=h))||s)&&(i=E)),_.vx===a&&_.vy===s&&_.el===i||(_.el=i,_.vx=a,_.vy=s,clearInterval(_.pid),i&&(_.pid=setInterval(function(){if(u=s?s*v:0,d=a?a*v:0,"function"==typeof c)return c.call(f,d,u,e);i===E?E.scrollTo(E.pageXOffset+d,E.pageYOffset+u):(i.scrollTop+=u,i.scrollLeft+=d)},24)))}},30),Y=function(e){function t(e,t){return void 0!==e&&!0!==e||(e=n.name),"function"==typeof e?e:function(n,i){var o=i.options.group.name;return t?e:e&&(e.join?e.indexOf(o)>-1:o==e)}}var n={},i=e.group;i&&"object"==typeof i||(i={name:i}),n.name=i.name,n.checkPull=t(i.pull,!0),n.checkPut=t(i.put),n.revertClone=i.revertClone,e.group=n};try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){M={capture:!1,passive:!1}}}))}catch(e){}function $(e,t){if(!e||!e.nodeType||1!==e.nodeType)throw"Sortable: `el` must be HTMLElement, and not "+{}.toString.call(e);this.el=e,this.options=t=oe({},t),e[D]=this;var n={group:Math.random(),sort:!0,disabled:!1,store:null,handle:null,scroll:!0,scrollSensitivity:30,scrollSpeed:10,draggable:/[uo]l/i.test(e.nodeName)?"li":">*",ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,setData:function(e,t){e.setData("Text",t.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==$.supportPointer};for(var i in n)!(i in t)&&(t[i]=n[i]);for(var o in Y(t),this)"_"===o.charAt(0)&&"function"==typeof this[o]&&(this[o]=this[o].bind(this));this.nativeDraggable=!t.forceFallback&&N,F(e,"mousedown",this._onTapStart),F(e,"touchstart",this._onTapStart),t.supportPointer&&F(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(F(e,"dragover",this),F(e,"dragenter",this)),I.push(this._onDragOver),t.store&&this.sort(t.store.get(this))}function X(t,n){"clone"!==t.lastPullMode&&(n=!0),i&&i.state!==n&&(J(i,"display",n?"none":""),n||i.state&&(t.options.group.revertClone?(o.insertBefore(i,a),t._animate(e,i)):o.insertBefore(i,e)),i.state=n)}function j(e,t,n){if(e){n=n||T;do{if(">*"===t&&e.parentNode===n||ne(e,t))return e}while(e=U(e))}return null}function U(e){var t=e.host;return t&&t.nodeType?t:e.parentNode}function F(e,t,n){e.addEventListener(t,n,M)}function G(e,t,n){e.removeEventListener(t,n,M)}function W(e,t,n){if(e)if(e.classList)e.classList[n?"add":"remove"](t);else{var i=(" "+e.className+" ").replace(w," ").replace(" "+t+" "," ");e.className=(i+(n?" "+t:"")).replace(w," ")}}function J(e,t,n){var i=e&&e.style;if(i){if(void 0===n)return T.defaultView&&T.defaultView.getComputedStyle?n=T.defaultView.getComputedStyle(e,""):e.currentStyle&&(n=e.currentStyle),void 0===t?n:n[t];t in i||(t="-webkit-"+t),i[t]=n+("string"==typeof n?"":"px")}}function V(e,t,n){if(e){var i=e.getElementsByTagName(t),o=0,a=i.length;if(n)for(;o<a;o++)n(i[o],o);return i}return[]}function z(e,t,n,o,a,s,r,l){e=e||t[D];var c=T.createEvent("Event"),d=e.options,u="on"+n.charAt(0).toUpperCase()+n.substr(1);c.initEvent(n,!0,!0),c.to=a||t,c.from=s||t,c.item=o||t,c.clone=i,c.oldIndex=r,c.newIndex=l,t.dispatchEvent(c),d[u]&&d[u].call(e,c)}function Q(e,t,n,i,o,a,s,r){var l,c,d=e[D],u=d.options.onMove;return(l=T.createEvent("Event")).initEvent("move",!0,!0),l.to=t,l.from=e,l.dragged=n,l.draggedRect=i,l.related=o||t,l.relatedRect=a||t.getBoundingClientRect(),l.willInsertAfter=r,e.dispatchEvent(l),u&&(c=u.call(d,l,s)),c}function Z(e){e.draggable=!1}function K(){A=!1}function ee(e){for(var t=e.tagName+e.className+e.src+e.href+e.textContent,n=t.length,i=0;n--;)i+=t.charCodeAt(n);return i.toString(36)}function te(e,t){var n=0;if(!e||!e.parentNode)return-1;for(;e&&(e=e.previousElementSibling);)"TEMPLATE"===e.nodeName.toUpperCase()||">*"!==t&&!ne(e,t)||n++;return n}function ne(e,t){if(e){var n=(t=t.split(".")).shift().toUpperCase(),i=new RegExp("\\s("+t.join("|")+")(?=\\s)","g");return!(""!==n&&e.nodeName.toUpperCase()!=n||t.length&&((" "+e.className+" ").match(i)||[]).length!=t.length)}return!1}function ie(e,t){var n,i;return function(){void 0===n&&(n=arguments,i=this,x(function(){1===n.length?e.call(i,n[0]):e.apply(i,n),n=void 0},t))}}function oe(e,t){if(e&&t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function ae(e){return C&&C.dom?C.dom(e).cloneNode(!0):k?k(e).clone(!0)[0]:e.cloneNode(!0)}function se(e){return x(e,0)}function re(e){return clearTimeout(e)}return $.prototype={constructor:$,_onTapStart:function(t){var n,i=this,o=this.el,a=this.options,r=a.preventOnFilter,l=t.type,c=t.touches&&t.touches[0],d=(c||t).target,u=t.target.shadowRoot&&t.path&&t.path[0]||d,f=a.filter;if(function(e){var t=e.getElementsByTagName("input"),n=t.length;for(;n--;){var i=t[n];i.checked&&P.push(i)}}(o),!e&&!(/mousedown|pointerdown/.test(l)&&0!==t.button||a.disabled)&&!u.isContentEditable&&(d=j(d,a.draggable,o))&&s!==d){if(n=te(d,a.draggable),"function"==typeof f){if(f.call(this,t,d,this))return z(i,u,"filter",d,o,o,n),void(r&&t.preventDefault())}else if(f&&(f=f.split(",").some(function(e){if(e=j(u,e.trim(),o))return z(i,e,"filter",d,o,o,n),!0})))return void(r&&t.preventDefault());a.handle&&!j(u,a.handle,o)||this._prepareDragStart(t,c,d,n)}},_prepareDragStart:function(n,i,r,l){var c,d=this,u=d.el,f=d.options,v=u.ownerDocument;r&&!e&&r.parentNode===u&&(m=n,o=u,t=(e=r).parentNode,a=e.nextSibling,s=r,p=f.group,h=l,this._lastX=(i||n).clientX,this._lastY=(i||n).clientY,e.style["will-change"]="all",c=function(){d._disableDelayedDrag(),e.draggable=d.nativeDraggable,W(e,f.chosenClass,!0),d._triggerDragStart(n,i),z(d,o,"choose",e,o,o,h)},f.ignore.split(",").forEach(function(t){V(e,t.trim(),Z)}),F(v,"mouseup",d._onDrop),F(v,"touchend",d._onDrop),F(v,"touchcancel",d._onDrop),F(v,"selectstart",d),f.supportPointer&&F(v,"pointercancel",d._onDrop),f.delay?(F(v,"mouseup",d._disableDelayedDrag),F(v,"touchend",d._disableDelayedDrag),F(v,"touchcancel",d._disableDelayedDrag),F(v,"mousemove",d._disableDelayedDrag),F(v,"touchmove",d._disableDelayedDrag),f.supportPointer&&F(v,"pointermove",d._disableDelayedDrag),d._dragStartTimer=x(c,f.delay)):c())},_disableDelayedDrag:function(){var e=this.el.ownerDocument;clearTimeout(this._dragStartTimer),G(e,"mouseup",this._disableDelayedDrag),G(e,"touchend",this._disableDelayedDrag),G(e,"touchcancel",this._disableDelayedDrag),G(e,"mousemove",this._disableDelayedDrag),G(e,"touchmove",this._disableDelayedDrag),G(e,"pointermove",this._disableDelayedDrag)},_triggerDragStart:function(t,n){(n=n||("touch"==t.pointerType?t:null))?(m={target:e,clientX:n.clientX,clientY:n.clientY},this._onDragStart(m,"touch")):this.nativeDraggable?(F(e,"dragend",this),F(o,"dragstart",this._onDragStart)):this._onDragStart(m,!0);try{T.selection?se(function(){T.selection.empty()}):window.getSelection().removeAllRanges()}catch(e){}},_dragStarted:function(){if(o&&e){var t=this.options;W(e,t.ghostClass,!0),W(e,t.dragClass,!1),$.active=this,z(this,o,"start",e,o,o,h)}else this._nulling()},_emulateDragOver:function(){if(y){if(this._lastX===y.clientX&&this._lastY===y.clientY)return;this._lastX=y.clientX,this._lastY=y.clientY,H||J(n,"display","none");var e=T.elementFromPoint(y.clientX,y.clientY),t=e,i=I.length;if(e&&e.shadowRoot&&(t=e=e.shadowRoot.elementFromPoint(y.clientX,y.clientY)),t)do{if(t[D]){for(;i--;)I[i]({clientX:y.clientX,clientY:y.clientY,target:e,rootEl:t});break}e=t}while(t=t.parentNode);H||J(n,"display","")}},_onTouchMove:function(e){if(m){var t=this.options,i=t.fallbackTolerance,o=t.fallbackOffset,a=e.touches?e.touches[0]:e,s=a.clientX-m.clientX+o.x,r=a.clientY-m.clientY+o.y,l=e.touches?"translate3d("+s+"px,"+r+"px,0)":"translate("+s+"px,"+r+"px)";if(!$.active){if(i&&O(B(a.clientX-this._lastX),B(a.clientY-this._lastY))<i)return;this._dragStarted()}this._appendGhost(),b=!0,y=a,J(n,"webkitTransform",l),J(n,"mozTransform",l),J(n,"msTransform",l),J(n,"transform",l),e.preventDefault()}},_appendGhost:function(){if(!n){var t,i=e.getBoundingClientRect(),a=J(e),s=this.options;W(n=e.cloneNode(!0),s.ghostClass,!1),W(n,s.fallbackClass,!0),W(n,s.dragClass,!0),J(n,"top",i.top-q(a.marginTop,10)),J(n,"left",i.left-q(a.marginLeft,10)),J(n,"width",i.width),J(n,"height",i.height),J(n,"opacity","0.8"),J(n,"position","fixed"),J(n,"zIndex","100000"),J(n,"pointerEvents","none"),s.fallbackOnBody&&T.body.appendChild(n)||o.appendChild(n),t=n.getBoundingClientRect(),J(n,"width",2*i.width-t.width),J(n,"height",2*i.height-t.height)}},_onDragStart:function(t,n){var a=this,s=t.dataTransfer,r=a.options;a._offUpEvents(),p.checkPull(a,a,e,t)&&((i=ae(e)).draggable=!1,i.style["will-change"]="",J(i,"display","none"),W(i,a.options.chosenClass,!1),a._cloneId=se(function(){o.insertBefore(i,e),z(a,o,"clone",e)})),W(e,r.dragClass,!0),n?("touch"===n?(F(T,"touchmove",a._onTouchMove),F(T,"touchend",a._onDrop),F(T,"touchcancel",a._onDrop),r.supportPointer&&(F(T,"pointermove",a._onTouchMove),F(T,"pointerup",a._onDrop))):(F(T,"mousemove",a._onTouchMove),F(T,"mouseup",a._onDrop)),a._loopId=setInterval(a._emulateDragOver,50)):(s&&(s.effectAllowed="move",r.setData&&r.setData.call(a,s,e)),F(T,"drop",a),a._dragStartId=se(a._dragStarted))},_onDragOver:function(s){var r,l,c,h,v=this.el,m=this.options,y=m.group,L=$.active,_=p===y,w=!1,E=m.sort;if(void 0!==s.preventDefault&&(s.preventDefault(),!m.dragoverBubble&&s.stopPropagation()),!e.animated&&(b=!0,L&&!m.disabled&&(_?E||(h=!o.contains(e)):g===this||(L.lastPullMode=p.checkPull(this,L,e,s))&&y.checkPut(this,L,e,s))&&(void 0===s.rootEl||s.rootEl===this.el))){if(R(s,m,this.el),A)return;if(r=j(s.target,m.draggable,v),l=e.getBoundingClientRect(),g!==this&&(g=this,w=!0),h)return X(L,!0),t=o,void(i||a?o.insertBefore(e,i||a):E||o.appendChild(e));if(0===v.children.length||v.children[0]===n||v===s.target&&function(e,t){var n=e.lastElementChild.getBoundingClientRect();return t.clientY-(n.top+n.height)>5||t.clientX-(n.left+n.width)>5}(v,s)){if(0!==v.children.length&&v.children[0]!==n&&v===s.target&&(r=v.lastElementChild),r){if(r.animated)return;c=r.getBoundingClientRect()}X(L,_),!1!==Q(o,v,e,l,r,c,s)&&(e.contains(v)||(v.appendChild(e),t=v),this._animate(l,e),r&&this._animate(c,r))}else if(r&&!r.animated&&r!==e&&void 0!==r.parentNode[D]){d!==r&&(d=r,u=J(r),f=J(r.parentNode));var T=(c=r.getBoundingClientRect()).right-c.left,q=c.bottom-c.top,k=S.test(u.cssFloat+u.display)||"flex"==f.display&&0===f["flex-direction"].indexOf("row"),C=r.offsetWidth>e.offsetWidth,M=r.offsetHeight>e.offsetHeight,N=(k?(s.clientX-c.left)/T:(s.clientY-c.top)/q)>.5,H=r.nextElementSibling,B=!1;if(k){var O=e.offsetTop,P=r.offsetTop;B=O===P?r.previousElementSibling===e&&!C||N&&C:r.previousElementSibling===e||e.previousElementSibling===r?(s.clientY-c.top)/q>.5:P>O}else w||(B=H!==e&&!M||N&&M);var I=Q(o,v,e,l,r,c,s,B);!1!==I&&(1!==I&&-1!==I||(B=1===I),A=!0,x(K,30),X(L,_),e.contains(v)||(B&&!H?v.appendChild(e):r.parentNode.insertBefore(e,B?H:r)),t=e.parentNode,this._animate(l,e),this._animate(c,r))}}},_animate:function(e,t){var n=this.options.animation;if(n){var i=t.getBoundingClientRect();1===e.nodeType&&(e=e.getBoundingClientRect()),J(t,"transition","none"),J(t,"transform","translate3d("+(e.left-i.left)+"px,"+(e.top-i.top)+"px,0)"),t.offsetWidth,J(t,"transition","all "+n+"ms"),J(t,"transform","translate3d(0,0,0)"),clearTimeout(t.animated),t.animated=x(function(){J(t,"transition",""),J(t,"transform",""),t.animated=!1},n)}},_offUpEvents:function(){var e=this.el.ownerDocument;G(T,"touchmove",this._onTouchMove),G(T,"pointermove",this._onTouchMove),G(e,"mouseup",this._onDrop),G(e,"touchend",this._onDrop),G(e,"pointerup",this._onDrop),G(e,"touchcancel",this._onDrop),G(e,"pointercancel",this._onDrop),G(e,"selectstart",this)},_onDrop:function(s){var r=this.el,l=this.options;clearInterval(this._loopId),clearInterval(_.pid),clearTimeout(this._dragStartTimer),re(this._cloneId),re(this._dragStartId),G(T,"mouseover",this),G(T,"mousemove",this._onTouchMove),this.nativeDraggable&&(G(T,"drop",this),G(r,"dragstart",this._onDragStart)),this._offUpEvents(),s&&(b&&(s.preventDefault(),!l.dropBubble&&s.stopPropagation()),n&&n.parentNode&&n.parentNode.removeChild(n),o!==t&&"clone"===$.active.lastPullMode||i&&i.parentNode&&i.parentNode.removeChild(i),e&&(this.nativeDraggable&&G(e,"dragend",this),Z(e),e.style["will-change"]="",W(e,this.options.ghostClass,!1),W(e,this.options.chosenClass,!1),z(this,o,"unchoose",e,t,o,h),o!==t?(v=te(e,l.draggable))>=0&&(z(null,t,"add",e,t,o,h,v),z(this,o,"remove",e,t,o,h,v),z(null,t,"sort",e,t,o,h,v),z(this,o,"sort",e,t,o,h,v)):e.nextSibling!==a&&(v=te(e,l.draggable))>=0&&(z(this,o,"update",e,t,o,h,v),z(this,o,"sort",e,t,o,h,v)),$.active&&(null!=v&&-1!==v||(v=h),z(this,o,"end",e,t,o,h,v),this.save()))),this._nulling()},_nulling:function(){o=e=t=n=a=i=s=r=l=m=y=b=v=d=u=g=p=$.active=null,P.forEach(function(e){e.checked=!0}),P.length=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragover":case"dragenter":e&&(this._onDragOver(t),function(e){e.dataTransfer&&(e.dataTransfer.dropEffect="move");e.preventDefault()}(t));break;case"mouseover":this._onDrop(t);break;case"selectstart":t.preventDefault()}},toArray:function(){for(var e,t=[],n=this.el.children,i=0,o=n.length,a=this.options;i<o;i++)j(e=n[i],a.draggable,this.el)&&t.push(e.getAttribute(a.dataIdAttr)||ee(e));return t},sort:function(e){var t={},n=this.el;this.toArray().forEach(function(e,i){var o=n.children[i];j(o,this.options.draggable,n)&&(t[e]=o)},this),e.forEach(function(e){t[e]&&(n.removeChild(t[e]),n.appendChild(t[e]))})},save:function(){var e=this.options.store;e&&e.set(this)},closest:function(e,t){return j(e,t||this.options.draggable,this.el)},option:function(e,t){var n=this.options;if(void 0===t)return n[e];n[e]=t,"group"===e&&Y(n)},destroy:function(){var e=this.el;e[D]=null,G(e,"mousedown",this._onTapStart),G(e,"touchstart",this._onTapStart),G(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(G(e,"dragover",this),G(e,"dragenter",this)),Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),function(e){e.removeAttribute("draggable")}),I.splice(I.indexOf(this._onDragOver),1),this._onDrop(),this.el=e=null}},F(T,"touchmove",function(e){$.active&&e.preventDefault()}),$.utils={on:F,off:G,css:J,find:V,is:function(e,t){return!!j(e,t,e)},extend:oe,throttle:ie,closest:j,toggleClass:W,clone:ae,index:te,nextTick:se,cancelNextTick:re},$.create=function(e,t){return new $(e,t)},$.version="1.7.0",$})},function(e,t,n){"use strict";n.r(t);const i=document.querySelector(".well_done"),o=document.querySelector(".monster_turn"),a=document.querySelector(".monster_wrong"),s=document.querySelector(".lose"),r=document.querySelector(".win"),l=document.querySelector("#hello"),c=document.querySelector(".greeting"),d=document.querySelector(".new_game");function u(){i.classList.add("invisible")}function f(){o.classList.add("invisible")}function h(){a.classList.add("invisible")}function v(){s.classList.add("invisible")}function p(){r.classList.add("invisible")}var g={ENTER:13};function m(e){let t,n;do{t=e.map(e=>[Math.random(),e]).sort((e,t)=>e[0]-t[0]).map(e=>e[1]),n=!0;for(let i=0;i<e.length;i++)e[i]!==t[i]&&(n=!1)}while(n);return t}function y(e){return new Promise(t=>{setTimeout(()=>{t()},1e3*e)})}var b=function(e,t){t.keyCode===g.ENTER&&e()};const L=document.querySelector(".monster"),_=document.querySelector(".monster_hp"),w=_.querySelector(".fullness"),S=_.querySelector("#monster_name"),D=_.querySelector("#monster_health"),E=document.querySelector(".fireball");let T={};fetch("monsternames.json").then(e=>e.json()).then(e=>{T=e}).catch(e=>{console.log(e)});let q=100;function x(e,t){return Math.floor(Math.random()*(t-e))+e}function k(e,t){const n=document.querySelector("."+e);n.classList="",n.classList.add(e),n.classList.add(`${e}-${t}`)}function C(){q=100,w.style.width="100%",D.innerHTML="100 hp";let e=x(1,4),t=x(1,4),n=x(1,4),i=x(1,4);k("weapon",e),k("head",t),k("body",n),k("legs",i),function(){let e=T.which[x(0,T.which.length)],t=T.type[x(0,T.type.length)],n=T.name[x(0,T.name.length)];S.innerHTML=`${e} ${t} ${n}`}()}function M(e){o.classList.remove("invisible");let t=function(e){let t=.7;return e<=10?t+=.05*e:t=e>3&&e<5?.9:.95,t}(e);return Math.random()<t}async function N(){E.classList.remove("invisible");let e=L.getBoundingClientRect().x-E.getBoundingClientRect().x,t=E.getBoundingClientRect().x;const n=Date.now();!function(){let e=new Audio("sounds/flamehit.ogg");e.autoplay=!1,e.play()}();const i=setInterval(function(){const o=Date.now()-n;if(o>=1e3)return clearInterval(i),E.classList.add("invisible"),void(E.style.left=t+"px");!function(n){E.style.left=t+n*e/1e3+"px"}(o)},20);await y(1),L.classList.add("bounce"),await y(1),L.classList.remove("bounce")}const H=document.querySelector(".player"),A=document.querySelector(".player_hp"),B=document.querySelector(".your_turn"),O=A.querySelector(".fullness"),P=A.querySelector("#player_name"),I=A.querySelector("#player_health"),R=document.querySelector(".arrow");let Y,$=100;function X(){B.classList.contains("invisible")&&B.classList.remove("invisible")}function j(e){!function(){let e=new Audio("sounds/success.ogg");e.autoplay=!1,e.play()}(),($+=e)>100&&($=100),O.style.width=`${$}%`,I.innerHTML=`${$} hp`}async function U(){R.classList.remove("invisible");let e=R.getBoundingClientRect().x-H.getBoundingClientRect().x-200,t=R.getBoundingClientRect().x;const n=Date.now();!function(){let e=new Audio("sounds/arrowhit.ogg");e.autoplay=!1,e.play()}();const i=setInterval(function(){const o=Date.now()-n;if(o>=1e3)return clearInterval(i),R.classList.add("invisible"),void(R.style.left=t+"px");!function(n){R.style.left=t-n*e/1e3+"px"}(o)},20);await y(1),H.classList.add("bounce"),await y(1),H.classList.remove("bounce")}function F(){return Y}const G=document.querySelector(".translatetask"),W=G.querySelector(".question_word"),J=G.querySelector(".answer"),V=G.querySelector(".send"),z=G.querySelector(".translate_area").querySelector(".text_block");let Q,Z,K;V.addEventListener("click",ie),G.addEventListener("keydown",b.bind(void 0,ie));let ee={};function te(){return ee}function ne(e){let t=Object.keys(e),n=t.length;return t[Math.floor(Math.random()*(n-0))+0]}async function ie(){let e=J.value.toLowerCase();ee[K].find(t=>t===e)?(Q(35),ae()):(V.classList.add("invisible"),await y(.5),z.classList.add("text_fail"),z.innerHTML="Not right :( Answer is:",J.value=ee[K][0],J.classList.add("text_fail"),J.disabled=!0,await y(2),Z(),ae())}function oe(e,t){Tt(),G.classList.remove("invisible"),K=ne(ee),W.innerHTML=K,J.value="",Q=e,Z=t}function ae(){G.classList.add("invisible"),z.classList.remove("text_fail"),z.innerHTML="Your answer (in Russian):",J.disabled=!1,J.classList.remove("text_fail"),V.classList.remove("invisible")}var se=n(0),re=n.n(se);const le=document.querySelector(".dragndroptask"),ce=le.querySelector(".send"),de=le.querySelector(".text_ru"),ue=le.querySelector(".text_fail"),fe=document.getElementById("dragndrop_area");let he,ve,pe;function ge(){le.classList.add("invisible"),fe.innerHTML=""}ce.addEventListener("click",async function(){let e=fe.children,t=Array.prototype.slice.call(e);if(t.map(function(e){return e.innerHTML}).join("")===pe)he(25),ge();else{ce.classList.add("invisible"),await y(.5),ue.classList.remove("invisible"),de.classList.add("invisible");let e=pe.split("");t.forEach(function(t,n){t.innerHTML=e[n],t.classList.add("red")}),await y(2),ve(),ge()}}),re.a.create(fe,{group:"dragndrop_area",animation:100});var me=function(e,t){Tt(),he=e,ve=t;let n=te();le.classList.remove("invisible"),pe=ne(n);let i=ee[pe][0],o=pe.length,a=m(pe.split(""));ce.classList.remove("invisible"),ue.classList.add("invisible"),de.classList.remove("invisible"),de.innerHTML=`Russian word is: ${i}`;for(let e=0;e<o;e++){let t=document.createElement("li");t.classList.add("letter"),t.innerHTML=`${a[e]}`,fe.appendChild(t)}};const ye=document.querySelector(".arithmetictask"),be=ye.querySelector(".first_arg"),Le=ye.querySelector(".second_arg"),_e=ye.querySelector(".sign"),we=ye.querySelector(".arithmetic_result"),Se=ye.querySelector(".arithmetictask_text"),De=ye.querySelector(".send");De.addEventListener("click",Me),ye.addEventListener("keydown",b.bind(void 0,Me));let Ee,Te,qe,xe,ke,Ce=["+","-","/","*"];async function Me(){let e=(t=`${qe}${xe}${ke}`,new Function("return "+t)());var t;e===Number(we.value)?(Ee(15),Ne()):(De.classList.add("invisible"),await y(.5),Se.children[1].classList.add("text_fail"),Se.children[1].innerHTML="Not right :( Answer is:",we.value=e,we.classList.add("text_fail"),we.disabled=!0,await y(2),Te(),Ne())}function Ne(){ye.classList.add("invisible"),Se.children[1].classList.remove("text_fail"),Se.children[1].innerHTML="fill in the empty field below",we.value="",we.disabled=!1,we.classList.remove("text_fail"),De.classList.remove("invisible")}var He=function(e,t){Tt(),Ee=e,Te=t,we.value="",ye.classList.remove("invisible"),qe=Math.floor(10*Math.random()),ke=Math.floor(10*Math.random());const n=m(Ce);"/"===(xe=n[0])&&0===ke&&(xe=n[1]),"/"===xe&&(qe*=ke),be.value=qe,Le.value=ke,_e.innerHTML=xe,be.disabled=!0,Le.disabled=!0};const Ae=document.querySelector(".speaktask_modal"),Be=Ae.querySelector(".send"),Oe=Ae.querySelector(".answer"),Pe=Ae.querySelector(".speak_area"),Ie=Ae.querySelector(".buttonplay");Be.addEventListener("click",je),Ae.addEventListener("keydown",b.bind(void 0,je));let Re,Ye,$e,Xe=window.speechSynthesis;async function je(){let e=Oe.value.toLowerCase();Re===e?(Ye(40),Ge()):(Be.classList.add("invisible"),await y(.5),Pe.children[0].classList.add("text_fail"),Pe.children[0].innerHTML="Not right :( Answer is:",Oe.value=Re,Oe.classList.add("text_fail"),Oe.disabled=!0,await y(2),$e(),Ge())}function Ue(e){e.preventDefault();let t=new SpeechSynthesisUtterance(Re);t.pitch=1,t.rate=1,t.volume=1,t.lang="en-US",Xe.speak(t)}function Fe(e,t){Tt(),Ye=e,$e=t;let n=te();Ae.classList.remove("invisible"),Re=ne(n),Ie.addEventListener("click",Ue)}function Ge(){Ae.classList.add("invisible"),Oe.value="",Pe.children[0].classList.remove("text_fail"),Pe.children[0].innerHTML="Your answer (in English):",Oe.disabled=!1,Oe.classList.remove("text_fail"),Be.classList.remove("invisible")}const We=document.querySelector("#congratulations"),Je=document.querySelector("#score_list"),Ve=document.querySelector(".ranking"),ze=document.querySelector(".shadow");function Qe(){Ve.classList.add("invisible"),ze.classList.add("invisible"),Je.innerHTML="",ze.removeEventListener("click",Qe)}const Ze=document.querySelector(".spellchoice");function Ke(){Ze.classList.contains("invisible")||Ze.classList.add("invisible")}function et(){Ze.classList.contains("invisible")&&(Ze.classList.remove("invisible"),B.classList.contains("invisible")||B.classList.add("invisible"))}const tt=document.querySelector(".taskchoice");function nt(){tt.classList.contains("invisible")||tt.classList.add("invisible")}function it(){tt.classList.contains("invisible")&&tt.classList.remove("invisible")}const ot=document.querySelector(".level"),at=document.querySelector(".levelNumb");var st=function(e){let t=(e+1)%5;var n;t||(t=5),play.classList="",play.classList=`canvas play_canvas-${t}`,ot.classList.remove("invisible"),at.innerHTML=`${e+1}`,C(),n=F(),$=100,O.style.width="100%",I.innerHTML="100 hp",P.innerHTML=`${n}`,L.classList.contains("invisible")&&(L.classList.remove("invisible"),_.classList.remove("invisible")),H.classList.contains("invisible")&&(H.classList.remove("invisible"),A.classList.remove("invisible")),X(),ae(),ge(),Ne(),Ge(),Qe(),Ke(),nt()};const rt=document.querySelector(".your_turn"),lt=document.querySelector(".heal"),ct=document.querySelector(".damage"),dt=document.querySelector(".arithmetic"),ut=document.querySelector(".translate"),ft=document.querySelector(".dragndrop"),ht=document.querySelector(".speaktask"),vt=document.querySelector(".new_game"),pt={HEAL:1,DAMAGE:2};let gt,mt=0,yt=!0;function bt(e){nt(),e(St,Dt)}function Lt(){p(),v(),h(),f(),u(),l.classList.contains("invisible")||l.classList.add("invisible"),st(mt=0)}function _t(){gt=pt.HEAL,Ke(),it()}function wt(){gt=pt.DAMAGE,Ke(),it()}async function St(e){gt===pt.DAMAGE?(N(),await y(2),async function(e){(q-=e)<0&&(q=0),w.style.width=`${q}%`,D.innerHTML=`${q} hp`,w.classList.add("damage_action"),await y(2),w.classList.remove("damage_action")}(e),await y(2),0===q?(r.classList.remove("invisible"),await y(2),Tt(),p(),st(++mt)):await Et()):(i.classList.remove("invisible"),j(e),await y(2),u(),await Et())}async function Dt(){await Et()}async function Et(){M(mt)?(await y(2),await async function(){if(f(),U(),await y(2),async function(e){($-=e)<0&&($=0),O.style.width=`${$}%`,I.innerHTML=`${$} hp`,O.classList.add("damage_action"),await y(2),O.classList.remove("damage_action")}(function(){let e=20;return mt>2&&mt<6?e=30:mt>=6&&(e=35),e}()),0===$){await y(2),s.classList.remove("invisible"),await y(2),Tt(),v();let e=F();Nt(e,mt);let t=Ht();!function(e,t,n){let i=!1;e.sort((e,t)=>t.level-e.level),e.splice(10);let o=e.length;for(let a=0;a<o;a++){let o=document.createElement("tr");e[a].level===t&&e[a].fullname===n&&(i||(i=!0,o.classList.add("current_user"),We.innerHTML=`Your position - ${a+1}!!!`)),o.innerHTML=`<tr><td>${a+1}</td>\n      <td>${e[a].fullname}</td>\n      <td>${e[a].level}</td></tr>`,Je.appendChild(o)}Ve.classList.remove("invisible"),ze.classList.remove("invisible"),ze.addEventListener("click",Qe)}(t,mt,e)}else await y(1),X(),Tt()}()):(await y(2),await async function(){f(),a.classList.remove("invisible"),await y(2),h(),await y(1),X()}(),Tt())}function Tt(){yt?(yt=!1,vt.classList.add("button_nonactive")):(yt=!0,vt.classList.remove("button_nonactive"))}n.d(t,"addUserInScore",function(){return Nt}),n.d(t,"giveGameScore",function(){return Ht});const qt=document.querySelector("#form"),xt=document.querySelector(".new_game"),kt=document.querySelector("#myaudio"),Ct=document.querySelector(".sound");let Mt;function Nt(e,t){Mt.push({fullname:e,level:t}),localStorage.setItem("gameScore",JSON.stringify(Mt))}function Ht(){return Mt}localStorage.gameScore?Mt=JSON.parse(localStorage.getItem("gameScore")):(Mt=[],localStorage.setItem("gameScore",JSON.stringify(Mt))),Ct.addEventListener("click",function(){Ct.classList.toggle("no-sound"),Ct.classList.contains("no-sound")?kt.pause():kt.play()}),qt.addEventListener("submit",function(e){e.preventDefault();let t=e.target.elements.firstname.value,n=e.target.elements.lastname.value;Y=t+" "+n}),qt.addEventListener("submit",function(){c.classList.add("invisible")}),qt.addEventListener("submit",function(){d.classList.contains("invisible")&&d.classList.remove("invisible")}),qt.addEventListener("submit",function(){l.classList.contains("invisible")&&l.classList.remove("invisible")}),xt.addEventListener("click",function(e){e.preventDefault(),yt&&Lt()}),function(){rt.addEventListener("click",et),lt.addEventListener("click",_t),ct.addEventListener("click",wt),dt.addEventListener("click",bt.bind(this,He)),ut.addEventListener("click",bt.bind(this,oe)),ft.addEventListener("click",bt.bind(this,me)),ht.addEventListener("click",bt.bind(this,Fe)),fetch("vocabulary.json").then(e=>e.json()).then(e=>{ee=e}).catch(e=>{console.log(e)})}(),kt.volume=.02},,,function(e,t,n){},function(e,t,n){n(1),e.exports=n(4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
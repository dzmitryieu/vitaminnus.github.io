!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(e,t,n){var i,o;
/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @license MIT
 */
/**!
 * Sortable
 * @author	RubaXa   <trash@rubaxa.org>
 * @license MIT
 */
!function(s){"use strict";void 0===(o="function"==typeof(i=s)?i.call(t,n,t,e):i)||(e.exports=o)}(function(){"use strict";if("undefined"==typeof window||!window.document)return function(){throw new Error("Sortable.js requires a window with a document")};var e,t,n,i,o,s,r,a,l,c,u,d,f,h,v,p,m,g,y,b,L,_={},S=/\s+/g,T=/left|right|inline/,w="Sortable"+(new Date).getTime(),D=window,E=D.document,q=D.parseInt,x=D.setTimeout,k=D.jQuery||D.Zepto,C=D.Polymer,M=!1,N="draggable"in E.createElement("div"),H=!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\.|msie)/i)&&((L=E.createElement("x")).style.cssText="pointer-events:auto","auto"===L.style.pointerEvents),A=!1,B=Math.abs,O=Math.min,I=[],P=[],R=ie(function(e,t,n){if(n&&t.scroll){var i,o,s,r,u,d,f=n[w],h=t.scrollSensitivity,v=t.scrollSpeed,p=e.clientX,m=e.clientY,g=window.innerWidth,y=window.innerHeight;if(l!==n&&(a=t.scroll,l=n,c=t.scrollFn,!0===a)){a=n;do{if(a.offsetWidth<a.scrollWidth||a.offsetHeight<a.scrollHeight)break}while(a=a.parentNode)}a&&(i=a,o=a.getBoundingClientRect(),s=(B(o.right-p)<=h)-(B(o.left-p)<=h),r=(B(o.bottom-m)<=h)-(B(o.top-m)<=h)),s||r||(r=(y-m<=h)-(m<=h),((s=(g-p<=h)-(p<=h))||r)&&(i=D)),_.vx===s&&_.vy===r&&_.el===i||(_.el=i,_.vx=s,_.vy=r,clearInterval(_.pid),i&&(_.pid=setInterval(function(){if(d=r?r*v:0,u=s?s*v:0,"function"==typeof c)return c.call(f,u,d,e);i===D?D.scrollTo(D.pageXOffset+u,D.pageYOffset+d):(i.scrollTop+=d,i.scrollLeft+=u)},24)))}},30),Y=function(e){function t(e,t){return void 0!==e&&!0!==e||(e=n.name),"function"==typeof e?e:function(n,i){var o=i.options.group.name;return t?e:e&&(e.join?e.indexOf(o)>-1:o==e)}}var n={},i=e.group;i&&"object"==typeof i||(i={name:i}),n.name=i.name,n.checkPull=t(i.pull,!0),n.checkPut=t(i.put),n.revertClone=i.revertClone,e.group=n};try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){M={capture:!1,passive:!1}}}))}catch(e){}function $(e,t){if(!e||!e.nodeType||1!==e.nodeType)throw"Sortable: `el` must be HTMLElement, and not "+{}.toString.call(e);this.el=e,this.options=t=oe({},t),e[w]=this;var n={group:Math.random(),sort:!0,disabled:!1,store:null,handle:null,scroll:!0,scrollSensitivity:30,scrollSpeed:10,draggable:/[uo]l/i.test(e.nodeName)?"li":">*",ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,setData:function(e,t){e.setData("Text",t.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==$.supportPointer};for(var i in n)!(i in t)&&(t[i]=n[i]);for(var o in Y(t),this)"_"===o.charAt(0)&&"function"==typeof this[o]&&(this[o]=this[o].bind(this));this.nativeDraggable=!t.forceFallback&&N,F(e,"mousedown",this._onTapStart),F(e,"touchstart",this._onTapStart),t.supportPointer&&F(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(F(e,"dragover",this),F(e,"dragenter",this)),P.push(this._onDragOver),t.store&&this.sort(t.store.get(this))}function X(t,n){"clone"!==t.lastPullMode&&(n=!0),i&&i.state!==n&&(J(i,"display",n?"none":""),n||i.state&&(t.options.group.revertClone?(o.insertBefore(i,s),t._animate(e,i)):o.insertBefore(i,e)),i.state=n)}function j(e,t,n){if(e){n=n||E;do{if(">*"===t&&e.parentNode===n||ne(e,t))return e}while(e=U(e))}return null}function U(e){var t=e.host;return t&&t.nodeType?t:e.parentNode}function F(e,t,n){e.addEventListener(t,n,M)}function G(e,t,n){e.removeEventListener(t,n,M)}function W(e,t,n){if(e)if(e.classList)e.classList[n?"add":"remove"](t);else{var i=(" "+e.className+" ").replace(S," ").replace(" "+t+" "," ");e.className=(i+(n?" "+t:"")).replace(S," ")}}function J(e,t,n){var i=e&&e.style;if(i){if(void 0===n)return E.defaultView&&E.defaultView.getComputedStyle?n=E.defaultView.getComputedStyle(e,""):e.currentStyle&&(n=e.currentStyle),void 0===t?n:n[t];t in i||(t="-webkit-"+t),i[t]=n+("string"==typeof n?"":"px")}}function V(e,t,n){if(e){var i=e.getElementsByTagName(t),o=0,s=i.length;if(n)for(;o<s;o++)n(i[o],o);return i}return[]}function z(e,t,n,o,s,r,a,l){e=e||t[w];var c=E.createEvent("Event"),u=e.options,d="on"+n.charAt(0).toUpperCase()+n.substr(1);c.initEvent(n,!0,!0),c.to=s||t,c.from=r||t,c.item=o||t,c.clone=i,c.oldIndex=a,c.newIndex=l,t.dispatchEvent(c),u[d]&&u[d].call(e,c)}function Q(e,t,n,i,o,s,r,a){var l,c,u=e[w],d=u.options.onMove;return(l=E.createEvent("Event")).initEvent("move",!0,!0),l.to=t,l.from=e,l.dragged=n,l.draggedRect=i,l.related=o||t,l.relatedRect=s||t.getBoundingClientRect(),l.willInsertAfter=a,e.dispatchEvent(l),d&&(c=d.call(u,l,r)),c}function Z(e){e.draggable=!1}function K(){A=!1}function ee(e){for(var t=e.tagName+e.className+e.src+e.href+e.textContent,n=t.length,i=0;n--;)i+=t.charCodeAt(n);return i.toString(36)}function te(e,t){var n=0;if(!e||!e.parentNode)return-1;for(;e&&(e=e.previousElementSibling);)"TEMPLATE"===e.nodeName.toUpperCase()||">*"!==t&&!ne(e,t)||n++;return n}function ne(e,t){if(e){var n=(t=t.split(".")).shift().toUpperCase(),i=new RegExp("\\s("+t.join("|")+")(?=\\s)","g");return!(""!==n&&e.nodeName.toUpperCase()!=n||t.length&&((" "+e.className+" ").match(i)||[]).length!=t.length)}return!1}function ie(e,t){var n,i;return function(){void 0===n&&(n=arguments,i=this,x(function(){1===n.length?e.call(i,n[0]):e.apply(i,n),n=void 0},t))}}function oe(e,t){if(e&&t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function se(e){return C&&C.dom?C.dom(e).cloneNode(!0):k?k(e).clone(!0)[0]:e.cloneNode(!0)}function re(e){return x(e,0)}function ae(e){return clearTimeout(e)}return $.prototype={constructor:$,_onTapStart:function(t){var n,i=this,o=this.el,s=this.options,a=s.preventOnFilter,l=t.type,c=t.touches&&t.touches[0],u=(c||t).target,d=t.target.shadowRoot&&t.path&&t.path[0]||u,f=s.filter;if(function(e){var t=e.getElementsByTagName("input"),n=t.length;for(;n--;){var i=t[n];i.checked&&I.push(i)}}(o),!e&&!(/mousedown|pointerdown/.test(l)&&0!==t.button||s.disabled)&&!d.isContentEditable&&(u=j(u,s.draggable,o))&&r!==u){if(n=te(u,s.draggable),"function"==typeof f){if(f.call(this,t,u,this))return z(i,d,"filter",u,o,o,n),void(a&&t.preventDefault())}else if(f&&(f=f.split(",").some(function(e){if(e=j(d,e.trim(),o))return z(i,e,"filter",u,o,o,n),!0})))return void(a&&t.preventDefault());s.handle&&!j(d,s.handle,o)||this._prepareDragStart(t,c,u,n)}},_prepareDragStart:function(n,i,a,l){var c,u=this,d=u.el,f=u.options,v=d.ownerDocument;a&&!e&&a.parentNode===d&&(g=n,o=d,t=(e=a).parentNode,s=e.nextSibling,r=a,p=f.group,h=l,this._lastX=(i||n).clientX,this._lastY=(i||n).clientY,e.style["will-change"]="all",c=function(){u._disableDelayedDrag(),e.draggable=u.nativeDraggable,W(e,f.chosenClass,!0),u._triggerDragStart(n,i),z(u,o,"choose",e,o,o,h)},f.ignore.split(",").forEach(function(t){V(e,t.trim(),Z)}),F(v,"mouseup",u._onDrop),F(v,"touchend",u._onDrop),F(v,"touchcancel",u._onDrop),F(v,"selectstart",u),f.supportPointer&&F(v,"pointercancel",u._onDrop),f.delay?(F(v,"mouseup",u._disableDelayedDrag),F(v,"touchend",u._disableDelayedDrag),F(v,"touchcancel",u._disableDelayedDrag),F(v,"mousemove",u._disableDelayedDrag),F(v,"touchmove",u._disableDelayedDrag),f.supportPointer&&F(v,"pointermove",u._disableDelayedDrag),u._dragStartTimer=x(c,f.delay)):c())},_disableDelayedDrag:function(){var e=this.el.ownerDocument;clearTimeout(this._dragStartTimer),G(e,"mouseup",this._disableDelayedDrag),G(e,"touchend",this._disableDelayedDrag),G(e,"touchcancel",this._disableDelayedDrag),G(e,"mousemove",this._disableDelayedDrag),G(e,"touchmove",this._disableDelayedDrag),G(e,"pointermove",this._disableDelayedDrag)},_triggerDragStart:function(t,n){(n=n||("touch"==t.pointerType?t:null))?(g={target:e,clientX:n.clientX,clientY:n.clientY},this._onDragStart(g,"touch")):this.nativeDraggable?(F(e,"dragend",this),F(o,"dragstart",this._onDragStart)):this._onDragStart(g,!0);try{E.selection?re(function(){E.selection.empty()}):window.getSelection().removeAllRanges()}catch(e){}},_dragStarted:function(){if(o&&e){var t=this.options;W(e,t.ghostClass,!0),W(e,t.dragClass,!1),$.active=this,z(this,o,"start",e,o,o,h)}else this._nulling()},_emulateDragOver:function(){if(y){if(this._lastX===y.clientX&&this._lastY===y.clientY)return;this._lastX=y.clientX,this._lastY=y.clientY,H||J(n,"display","none");var e=E.elementFromPoint(y.clientX,y.clientY),t=e,i=P.length;if(e&&e.shadowRoot&&(t=e=e.shadowRoot.elementFromPoint(y.clientX,y.clientY)),t)do{if(t[w]){for(;i--;)P[i]({clientX:y.clientX,clientY:y.clientY,target:e,rootEl:t});break}e=t}while(t=t.parentNode);H||J(n,"display","")}},_onTouchMove:function(e){if(g){var t=this.options,i=t.fallbackTolerance,o=t.fallbackOffset,s=e.touches?e.touches[0]:e,r=s.clientX-g.clientX+o.x,a=s.clientY-g.clientY+o.y,l=e.touches?"translate3d("+r+"px,"+a+"px,0)":"translate("+r+"px,"+a+"px)";if(!$.active){if(i&&O(B(s.clientX-this._lastX),B(s.clientY-this._lastY))<i)return;this._dragStarted()}this._appendGhost(),b=!0,y=s,J(n,"webkitTransform",l),J(n,"mozTransform",l),J(n,"msTransform",l),J(n,"transform",l),e.preventDefault()}},_appendGhost:function(){if(!n){var t,i=e.getBoundingClientRect(),s=J(e),r=this.options;W(n=e.cloneNode(!0),r.ghostClass,!1),W(n,r.fallbackClass,!0),W(n,r.dragClass,!0),J(n,"top",i.top-q(s.marginTop,10)),J(n,"left",i.left-q(s.marginLeft,10)),J(n,"width",i.width),J(n,"height",i.height),J(n,"opacity","0.8"),J(n,"position","fixed"),J(n,"zIndex","100000"),J(n,"pointerEvents","none"),r.fallbackOnBody&&E.body.appendChild(n)||o.appendChild(n),t=n.getBoundingClientRect(),J(n,"width",2*i.width-t.width),J(n,"height",2*i.height-t.height)}},_onDragStart:function(t,n){var s=this,r=t.dataTransfer,a=s.options;s._offUpEvents(),p.checkPull(s,s,e,t)&&((i=se(e)).draggable=!1,i.style["will-change"]="",J(i,"display","none"),W(i,s.options.chosenClass,!1),s._cloneId=re(function(){o.insertBefore(i,e),z(s,o,"clone",e)})),W(e,a.dragClass,!0),n?("touch"===n?(F(E,"touchmove",s._onTouchMove),F(E,"touchend",s._onDrop),F(E,"touchcancel",s._onDrop),a.supportPointer&&(F(E,"pointermove",s._onTouchMove),F(E,"pointerup",s._onDrop))):(F(E,"mousemove",s._onTouchMove),F(E,"mouseup",s._onDrop)),s._loopId=setInterval(s._emulateDragOver,50)):(r&&(r.effectAllowed="move",a.setData&&a.setData.call(s,r,e)),F(E,"drop",s),s._dragStartId=re(s._dragStarted))},_onDragOver:function(r){var a,l,c,h,v=this.el,g=this.options,y=g.group,L=$.active,_=p===y,S=!1,D=g.sort;if(void 0!==r.preventDefault&&(r.preventDefault(),!g.dragoverBubble&&r.stopPropagation()),!e.animated&&(b=!0,L&&!g.disabled&&(_?D||(h=!o.contains(e)):m===this||(L.lastPullMode=p.checkPull(this,L,e,r))&&y.checkPut(this,L,e,r))&&(void 0===r.rootEl||r.rootEl===this.el))){if(R(r,g,this.el),A)return;if(a=j(r.target,g.draggable,v),l=e.getBoundingClientRect(),m!==this&&(m=this,S=!0),h)return X(L,!0),t=o,void(i||s?o.insertBefore(e,i||s):D||o.appendChild(e));if(0===v.children.length||v.children[0]===n||v===r.target&&function(e,t){var n=e.lastElementChild.getBoundingClientRect();return t.clientY-(n.top+n.height)>5||t.clientX-(n.left+n.width)>5}(v,r)){if(0!==v.children.length&&v.children[0]!==n&&v===r.target&&(a=v.lastElementChild),a){if(a.animated)return;c=a.getBoundingClientRect()}X(L,_),!1!==Q(o,v,e,l,a,c,r)&&(e.contains(v)||(v.appendChild(e),t=v),this._animate(l,e),a&&this._animate(c,a))}else if(a&&!a.animated&&a!==e&&void 0!==a.parentNode[w]){u!==a&&(u=a,d=J(a),f=J(a.parentNode));var E=(c=a.getBoundingClientRect()).right-c.left,q=c.bottom-c.top,k=T.test(d.cssFloat+d.display)||"flex"==f.display&&0===f["flex-direction"].indexOf("row"),C=a.offsetWidth>e.offsetWidth,M=a.offsetHeight>e.offsetHeight,N=(k?(r.clientX-c.left)/E:(r.clientY-c.top)/q)>.5,H=a.nextElementSibling,B=!1;if(k){var O=e.offsetTop,I=a.offsetTop;B=O===I?a.previousElementSibling===e&&!C||N&&C:a.previousElementSibling===e||e.previousElementSibling===a?(r.clientY-c.top)/q>.5:I>O}else S||(B=H!==e&&!M||N&&M);var P=Q(o,v,e,l,a,c,r,B);!1!==P&&(1!==P&&-1!==P||(B=1===P),A=!0,x(K,30),X(L,_),e.contains(v)||(B&&!H?v.appendChild(e):a.parentNode.insertBefore(e,B?H:a)),t=e.parentNode,this._animate(l,e),this._animate(c,a))}}},_animate:function(e,t){var n=this.options.animation;if(n){var i=t.getBoundingClientRect();1===e.nodeType&&(e=e.getBoundingClientRect()),J(t,"transition","none"),J(t,"transform","translate3d("+(e.left-i.left)+"px,"+(e.top-i.top)+"px,0)"),t.offsetWidth,J(t,"transition","all "+n+"ms"),J(t,"transform","translate3d(0,0,0)"),clearTimeout(t.animated),t.animated=x(function(){J(t,"transition",""),J(t,"transform",""),t.animated=!1},n)}},_offUpEvents:function(){var e=this.el.ownerDocument;G(E,"touchmove",this._onTouchMove),G(E,"pointermove",this._onTouchMove),G(e,"mouseup",this._onDrop),G(e,"touchend",this._onDrop),G(e,"pointerup",this._onDrop),G(e,"touchcancel",this._onDrop),G(e,"pointercancel",this._onDrop),G(e,"selectstart",this)},_onDrop:function(r){var a=this.el,l=this.options;clearInterval(this._loopId),clearInterval(_.pid),clearTimeout(this._dragStartTimer),ae(this._cloneId),ae(this._dragStartId),G(E,"mouseover",this),G(E,"mousemove",this._onTouchMove),this.nativeDraggable&&(G(E,"drop",this),G(a,"dragstart",this._onDragStart)),this._offUpEvents(),r&&(b&&(r.preventDefault(),!l.dropBubble&&r.stopPropagation()),n&&n.parentNode&&n.parentNode.removeChild(n),o!==t&&"clone"===$.active.lastPullMode||i&&i.parentNode&&i.parentNode.removeChild(i),e&&(this.nativeDraggable&&G(e,"dragend",this),Z(e),e.style["will-change"]="",W(e,this.options.ghostClass,!1),W(e,this.options.chosenClass,!1),z(this,o,"unchoose",e,t,o,h),o!==t?(v=te(e,l.draggable))>=0&&(z(null,t,"add",e,t,o,h,v),z(this,o,"remove",e,t,o,h,v),z(null,t,"sort",e,t,o,h,v),z(this,o,"sort",e,t,o,h,v)):e.nextSibling!==s&&(v=te(e,l.draggable))>=0&&(z(this,o,"update",e,t,o,h,v),z(this,o,"sort",e,t,o,h,v)),$.active&&(null!=v&&-1!==v||(v=h),z(this,o,"end",e,t,o,h,v),this.save()))),this._nulling()},_nulling:function(){o=e=t=n=s=i=r=a=l=g=y=b=v=u=d=m=p=$.active=null,I.forEach(function(e){e.checked=!0}),I.length=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragover":case"dragenter":e&&(this._onDragOver(t),function(e){e.dataTransfer&&(e.dataTransfer.dropEffect="move");e.preventDefault()}(t));break;case"mouseover":this._onDrop(t);break;case"selectstart":t.preventDefault()}},toArray:function(){for(var e,t=[],n=this.el.children,i=0,o=n.length,s=this.options;i<o;i++)j(e=n[i],s.draggable,this.el)&&t.push(e.getAttribute(s.dataIdAttr)||ee(e));return t},sort:function(e){var t={},n=this.el;this.toArray().forEach(function(e,i){var o=n.children[i];j(o,this.options.draggable,n)&&(t[e]=o)},this),e.forEach(function(e){t[e]&&(n.removeChild(t[e]),n.appendChild(t[e]))})},save:function(){var e=this.options.store;e&&e.set(this)},closest:function(e,t){return j(e,t||this.options.draggable,this.el)},option:function(e,t){var n=this.options;if(void 0===t)return n[e];n[e]=t,"group"===e&&Y(n)},destroy:function(){var e=this.el;e[w]=null,G(e,"mousedown",this._onTapStart),G(e,"touchstart",this._onTapStart),G(e,"pointerdown",this._onTapStart),this.nativeDraggable&&(G(e,"dragover",this),G(e,"dragenter",this)),Array.prototype.forEach.call(e.querySelectorAll("[draggable]"),function(e){e.removeAttribute("draggable")}),P.splice(P.indexOf(this._onDragOver),1),this._onDrop(),this.el=e=null}},F(E,"touchmove",function(e){$.active&&e.preventDefault()}),$.utils={on:F,off:G,css:J,find:V,is:function(e,t){return!!j(e,t,e)},extend:oe,throttle:ie,closest:j,toggleClass:W,clone:se,index:te,nextTick:re,cancelNextTick:ae},$.create=function(e,t){return new $(e,t)},$.version="1.7.0",$})},function(e,t,n){"use strict";n.r(t);const i=document.querySelector(".well_done"),o=document.querySelector(".monster_turn"),s=document.querySelector(".monster_wrong"),r=document.querySelector(".lose"),a=document.querySelector(".win");function l(){i.classList.add("invisible")}function c(){o.classList.add("invisible")}function u(){s.classList.add("invisible")}function d(){r.classList.add("invisible")}function f(){a.classList.add("invisible")}const h=document.querySelector(".monster"),v=document.querySelector(".monster_hp"),p=v.querySelector(".fullness"),m=v.querySelector("#monster_name"),g=v.querySelector("#monster_health"),y=document.querySelector(".fireball");let b={};fetch("monsternames.json").then(e=>e.json()).then(e=>{b=e}).catch(e=>{console.log(e)});let L=100;function _(e,t){return Math.floor(Math.random()*(t-e))+e}function S(e,t){const n=document.querySelector("."+e);n.classList="",n.classList.add(e),n.classList.add(`${e}-${t}`),function(){let e=b.which[_(0,b.which.length)],t=b.type[_(0,b.type.length)],n=b.name[_(0,b.name.length)];m.innerHTML=`${e} ${t} ${n}`}()}function T(e){o.classList.remove("invisible");let t=function(e){let t=.7;return e<=10?t+=.05*e:t=e>3&&e<5?.9:.95,t}(e);return Math.random()<t}function w(){y.classList.remove("invisible");let e=h.getBoundingClientRect().x-y.getBoundingClientRect().x,t=y.getBoundingClientRect().x;const n=Date.now();!function(){let e=new Audio("sounds/flamehit.ogg");e.autoplay=!1,e.play()}();const i=setInterval(function(){const o=Date.now()-n;if(o>=1e3)return clearInterval(i),y.classList.add("invisible"),void(y.style.left=t+"px");!function(n){y.style.left=t+n*e/1e3+"px"}(o)},20);setTimeout(function(){h.classList.add("bounce"),setTimeout(()=>h.classList.remove("bounce"),1e3)},1e3)}const D=document.querySelector(".player"),E=document.querySelector(".player_hp"),q=document.querySelector(".your_turn"),x=E.querySelector(".fullness"),k=E.querySelector("#player_name"),C=E.querySelector("#player_health"),M=document.querySelector(".arrow");let N=100;function H(){q.classList.contains("invisible")&&q.classList.remove("invisible")}function A(e){!function(){let e=new Audio("sounds/success.ogg");e.autoplay=!1,e.play()}(),(N+=e)>100&&(N=100),x.style.width=`${N}%`,C.innerHTML=`${N} hp`}function B(){M.classList.remove("invisible");let e=M.getBoundingClientRect().x-D.getBoundingClientRect().x-200,t=M.getBoundingClientRect().x;const n=Date.now();!function(){let e=new Audio("../sounds/arrowhit.ogg");e.autoplay=!1,e.play()}();const i=setInterval(function(){const o=Date.now()-n;if(o>=1e3)return clearInterval(i),M.classList.add("invisible"),void(M.style.left=t+"px");!function(n){M.style.left=t-n*e/1e3+"px"}(o)},20);setTimeout(function(){D.classList.add("bounce"),setTimeout(()=>D.classList.remove("bounce"),1e3)},1e3)}const O=document.querySelector("#hello");let I;const P=document.querySelector(".greeting");function R(){return I}const Y=document.querySelector(".translatetask"),$=Y.querySelector(".question_word"),X=Y.querySelector(".answer"),j=Y.querySelector(".send"),U=Y.querySelector(".translate_area").querySelector(".text_block");let F,G,W,J,V;j.addEventListener("click",K),Y.addEventListener("keydown",function(e){13===e.keyCode&&K()});let z={};function Q(){return z}function Z(e){let t=Object.keys(e),n=t.length;return t[Math.floor(Math.random()*(n-0))+0]}function K(){let e=X.value.toLowerCase();z[W].find(t=>t===e)?(F(35),te()):(j.classList.add("invisible"),J=setTimeout(()=>{U.classList.add("text_fail"),U.innerHTML="Not right :( Answer is:",X.value=z[W][0],X.classList.add("text_fail"),X.disabled=!0},500),V=setTimeout(()=>{G(),te()},4e3))}function ee(e,t){Y.classList.remove("invisible"),W=Z(z),$.innerHTML=W,X.value="",F=e,G=t}function te(){Y.classList.add("invisible"),U.classList.remove("text_fail"),U.innerHTML="Your answer (in Russian):",X.disabled=!1,X.classList.remove("text_fail"),j.classList.remove("invisible"),clearTimeout(J),clearTimeout(V)}var ne=n(0),ie=n.n(ne);const oe=document.querySelector(".dragndroptask"),se=oe.querySelector(".send"),re=oe.querySelector(".text_ru"),ae=oe.querySelector(".text_fail");var le=document.getElementById("dragndrop_area");let ce,ue,de,fe,he;function ve(){let e=le.children,t=Array.prototype.slice.call(e);t.map(function(e){return e.innerHTML}).join("")===de?(ce(25),pe()):(se.classList.add("invisible"),fe=setTimeout(()=>{ae.classList.remove("invisible"),re.classList.add("invisible");let e=de.split("");t.forEach(function(t,n){t.innerHTML=e[n],t.classList.add("red")})},500),he=setTimeout(()=>{ue(),pe()},4e3))}function pe(){oe.classList.add("invisible"),le.innerHTML="",clearTimeout(fe),clearTimeout(he)}se.addEventListener("click",ve),oe.addEventListener("keydown",function(e){13===e.keyCode&&ve()}),ie.a.create(le,{group:"dragndrop_area",animation:100});var me=function(e,t){ce=e,ue=t;let n=Q();oe.classList.remove("invisible"),de=Z(n);let i=z[de][0],o=de.length,s=Mt(de.split(""));se.classList.remove("invisible"),ae.classList.add("invisible"),re.classList.remove("invisible"),re.innerHTML=`Russian word is: ${i}`;for(let e=0;e<o;e++){let t=document.createElement("li");t.classList.add("letter"),t.innerHTML=`${s[e]}`,le.appendChild(t)}};const ge=document.querySelector(".arithmetictask"),ye=ge.querySelector(".first_arg"),be=ge.querySelector(".second_arg"),Le=ge.querySelector(".sign"),_e=ge.querySelector(".arithmetic_result"),Se=ge.querySelector(".arithmetictask_text"),Te=ge.querySelector(".send");Te.addEventListener("click",Ne),ge.addEventListener("keydown",function(e){13===e.keyCode&&Ne()});let we,De,Ee,qe,xe,ke,Ce,Me=["+","-","/","*"];function Ne(){let e=(t=`${Ee}${qe}${xe}`,new Function("return "+t)());var t;e===Number(_e.value)?(we(15),He()):(Te.classList.add("invisible"),ke=setTimeout(()=>{Se.children[1].classList.add("text_fail"),Se.children[1].innerHTML="Not right :( Answer is:",_e.value=e,_e.classList.add("text_fail"),_e.disabled=!0},500),Ce=setTimeout(()=>{De(),He()},4e3))}function He(){ge.classList.add("invisible"),Se.children[1].classList.remove("text_fail"),Se.children[1].innerHTML="fill in the empty field below",_e.value="",_e.disabled=!1,_e.classList.remove("text_fail"),Te.classList.remove("invisible"),clearTimeout(ke),clearTimeout(Ce)}var Ae=function(e,t){we=e,De=t,_e.value="",ge.classList.remove("invisible"),Ee=Math.floor(10*Math.random()),xe=Math.floor(10*Math.random());const n=Mt(Me);"/"===(qe=n[0])&&0===xe&&(qe=n[1]),"/"===qe&&(Ee*=xe),ye.value=Ee,be.value=xe,Le.innerHTML=qe,ye.disabled=!0,be.disabled=!0};const Be=document.querySelector(".speaktask_modal"),Oe=Be.querySelector(".send"),Ie=Be.querySelector(".answer"),Pe=Be.querySelector(".speak_area"),Re=Be.querySelector(".buttonplay");Oe.addEventListener("click",Ge),Be.addEventListener("keydown",function(e){13===e.keyCode&&Ge()});let Ye,$e,Xe,je,Ue,Fe=window.speechSynthesis;function Ge(){let e=Ie.value.toLowerCase();Ye===e?($e(40),Ve()):(Oe.classList.add("invisible"),je=setTimeout(()=>{Pe.children[0].classList.add("text_fail"),Pe.children[0].innerHTML="Not right :( Answer is:",Ie.value=Ye,Ie.classList.add("text_fail"),Ie.disabled=!0},500),Ue=setTimeout(()=>{Xe(),Ve()},4e3))}function We(e){e.preventDefault();let t=new SpeechSynthesisUtterance(Ye);t.pitch=1,t.rate=1,t.volume=1,t.lang="en-US",Fe.speak(t)}function Je(e,t){$e=e,Xe=t;let n=Q();Be.classList.remove("invisible"),Ye=Z(n),Re.addEventListener("click",We)}function Ve(){Be.classList.add("invisible"),Ie.value="",Pe.children[0].classList.remove("text_fail"),Pe.children[0].innerHTML="Your answer (in English):",Ie.disabled=!1,Ie.classList.remove("text_fail"),Oe.classList.remove("invisible"),clearTimeout(je),clearTimeout(Ue)}const ze=document.querySelector("#congratulations"),Qe=document.querySelector("#score_list"),Ze=document.querySelector(".ranking"),Ke=document.querySelector(".shadow");function et(){Ze.classList.add("invisible"),Ke.classList.add("invisible"),Qe.innerHTML=""}const tt=document.querySelector(".taskchoice");function nt(){tt.classList.contains("invisible")||tt.classList.add("invisible")}function it(){tt.classList.contains("invisible")&&tt.classList.remove("invisible")}const ot=document.querySelector(".spellchoice");function st(){ot.classList.contains("invisible")||ot.classList.add("invisible")}function rt(){ot.classList.contains("invisible")&&(ot.classList.remove("invisible"),q.classList.contains("invisible")||q.classList.add("invisible"))}const at=document.querySelector(".level"),lt=document.querySelector(".levelNumb");var ct=function(e){let t=(e+1)%5;var n;t||(t=5),play.classList="",play.classList=`canvas play_canvas-${t}`,at.classList.remove("invisible"),lt.innerHTML=`${e+1}`,function(){L=100,p.style.width="100%",g.innerHTML="100 hp";let e=_(1,4),t=_(1,4),n=_(1,4),i=_(1,4);S("weapon",e),S("head",t),S("body",n),S("legs",i)}(),n=R(),N=100,x.style.width="100%",C.innerHTML="100 hp",k.innerHTML=`${n}`,h.classList.contains("invisible")&&(h.classList.remove("invisible"),v.classList.remove("invisible")),D.classList.contains("invisible")&&(D.classList.remove("invisible"),E.classList.remove("invisible")),H(),te(),pe(),He(),Ve(),et(),st(),nt()};document.querySelector("#hello");const ut=document.querySelector(".new_game"),dt=document.querySelector(".your_turn"),ft=document.querySelector(".heal"),ht=document.querySelector(".damage"),vt=document.querySelector(".arithmetic"),pt=document.querySelector(".translate"),mt=document.querySelector(".dragndrop"),gt=document.querySelector(".speaktask"),yt={HEAL:1,DAMAGE:2};let bt,Lt,_t,St=0;function Tt(){bt=yt.HEAL,st(),it()}function wt(){bt=yt.DAMAGE,st(),it()}function Dt(e){bt===yt.DAMAGE?(w(),Lt=setTimeout(function(){(L-=e)<0&&(L=0),p.style.width=`${L}%`,g.innerHTML=`${L} hp`,p.classList.add("damage_action"),setTimeout(()=>p.classList.remove("damage_action"),2e3),Lt=setTimeout(function(){0===L?(a.classList.remove("invisible"),Lt=setTimeout(function(){f(),ct(++St)},2e3)):Et()},2e3)},2e3)):(i.classList.remove("invisible"),A(e),Lt=setTimeout(function(){l(),Et()},2e3))}function Et(){const e=T(St);Lt=e?setTimeout(kt,2e3):setTimeout(Ct,2e3)}function qt(){Et()}function xt(e){nt(),e(Dt,qt)}function kt(){c(),B();let e=20;St>2&&St<6?e=30:St>=6&&(e=35),Lt=setTimeout(function(){(N-=e)<0&&(N=0),x.style.width=`${N}%`,C.innerHTML=`${N} hp`,x.classList.add("damage_action"),setTimeout(()=>x.classList.remove("damage_action"),2e3),0===N?(Lt=setTimeout(function(){r.classList.remove("invisible")},2e3),_t=setTimeout(function(){d();let e=R();Pt(e,St),function(e,t,n){let i=!1;e.sort((e,t)=>t.level-e.level),e.splice(10);let o=e.length;for(let s=0;s<o;s++){let o=document.createElement("tr");e[s].level===t&&e[s].fullname===n&&(i||(i=!0,o.classList.add("current_user"),ze.innerHTML=`Your position - ${s+1}!!!`)),o.innerHTML=`<tr><td>${s+1}</td>\n      <td>${e[s].fullname}</td>\n      <td>${e[s].level}</td></tr>`,Qe.appendChild(o)}Ze.classList.remove("invisible"),Ke.classList.remove("invisible"),Ke.addEventListener("click",et)}(Rt(),St,e)},3e3)):Lt=setTimeout(H,3e3)},2e3)}function Ct(){c(),s.classList.remove("invisible"),Lt=setTimeout(u,2e3),_t=setTimeout(H,3e3)}function Mt(e){let t,n;do{t=e.map(e=>[Math.random(),e]).sort((e,t)=>e[0]-t[0]).map(e=>e[1]),n=!0;for(let i=0;i<e.length;i++)e[i]!==t[i]&&(n=!1)}while(n);return t}var Nt=function(e){return e.preventDefault(),f(),d(),u(),c(),l(),O.classList.contains("invisible")||O.classList.add("invisible"),St=0,clearTimeout(Lt),clearTimeout(_t),ct(St),!1};n.d(t,"addUserInScore",function(){return Pt}),n.d(t,"giveGameScore",function(){return Rt});const Ht=document.querySelector("#form"),At=document.querySelector(".new_game"),Bt=document.querySelector("#myaudio"),Ot=document.querySelector(".sound");let It;function Pt(e,t){It.push({fullname:e,level:t}),localStorage.setItem("gameScore",JSON.stringify(It))}function Rt(){return It}localStorage.gameScore?It=JSON.parse(localStorage.getItem("gameScore")):(It=[],localStorage.setItem("gameScore",JSON.stringify(It))),Ot.addEventListener("click",function(){Ot.classList.toggle("no-sound"),Ot.classList.contains("no-sound")?Bt.pause():Bt.play()}),Ht.addEventListener("submit",function(e){e.preventDefault();let t=e.target.elements.firstname.value,n=e.target.elements.lastname.value;I=t+" "+n,P.classList.add("invisible"),ut.classList.contains("invisible")&&ut.classList.remove("invisible"),O.classList.contains("invisible")&&O.classList.remove("invisible")}),At.addEventListener("click",Nt),function(){dt.addEventListener("click",rt),ft.addEventListener("click",Tt),ht.addEventListener("click",wt),vt.addEventListener("click",xt.bind(this,Ae)),pt.addEventListener("click",xt.bind(this,ee)),mt.addEventListener("click",xt.bind(this,me)),gt.addEventListener("click",xt.bind(this,Je)),fetch("vocabulary.json").then(e=>e.json()).then(e=>{z=e}).catch(e=>{console.log(e)})}(),Bt.volume=.02},,,function(e,t,n){},function(e,t,n){n(1),e.exports=n(4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,